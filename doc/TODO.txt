TODO:
    x Fix the fact that visibility in the shadow integral doesn't work.
        > AHA! This is definitely the right hypothesis: when you detect acne in findClosest, you discard the entire
          object, EVEN IF IT HAD MORE INTERSECTIONS TO OFFER. That's why some points behind the sphere were correctly
          black and some weren't; it's reverse acne (you get acne in a region where the acne is actually undetectable
          because it should be black, causing the object to disappear and hence you DO get light).
        > Think wisely about how to fix this. Either all intersection laws should take acne into account, OR you ask the
          interface user to start the ray with an offset. You probably can't do that internally, because the t that will
          be returned will be incorrect as seen by the interface user.
          Although, then again, the t returned is probably just offset by your initial offset, so you could add to it before returning...
    - If you render too many pixels, you get a segmentation fault (stack becomes too big).
      You need to allocate the screen on the heap, I think.
    - Why the heck did I make a material be able to have a BRDF and an emitter? A light has no BRDFs ...
    x Gotta normalise all your vector projections.
    - Sky dome
    - The lib/ folder should probably use Git submodules so that I'm not pushing a load of files for no reason.
    - Refraction
    - Transformation
    - Animation
    - Parallelisation (+ profiling in Visual Studio)